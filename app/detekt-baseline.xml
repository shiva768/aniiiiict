<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>CyclomaticComplexMethod:DetailModal.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun DetailModal( programWithWork: ProgramWithWork, isLoading: Boolean, onDismiss: () -&gt; Unit, viewModel: DetailModalViewModel = hiltViewModel(), onRefresh: () -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:AuthScreen.kt$@Composable fun AuthScreen( uiState: MainUiState, onLoginClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:ConfirmDialog.kt$@Composable fun ConfirmDialog( episodeNumber: Int, episodeCount: Int, onConfirm: () -&gt; Unit, onDismiss: () -&gt; Unit )</ID>
    <ID>FunctionNaming:DetailModal.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun DetailModal( programWithWork: ProgramWithWork, isLoading: Boolean, onDismiss: () -&gt; Unit, viewModel: DetailModalViewModel = hiltViewModel(), onRefresh: () -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:EpisodeCard.kt$@Composable fun EpisodeCard( program: Program, onRecordEpisode: (String) -&gt; Unit, onMarkUpToAsWatched: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:EpisodesList.kt$@Composable fun EpisodesList( programs: List&lt;Program&gt;, onRecordEpisode: (String) -&gt; Unit, onMarkUpToAsWatched: (Int) -&gt; Unit, )</ID>
    <ID>FunctionNaming:FilterBar.kt$@Composable fun FilterSelectionDialog( title: String, items: List&lt;String&gt;, selectedItems: Set&lt;String&gt;, onItemSelected: (String) -&gt; Unit, onDismiss: () -&gt; Unit )</ID>
    <ID>FunctionNaming:FilterBar.kt$@OptIn(ExperimentalLayoutApi::class) @Composable fun FilterBar( filterState: FilterState, availableMedia: List&lt;String&gt;, availableSeasons: List&lt;SeasonName&gt;, availableYears: List&lt;Int&gt;, availableChannels: List&lt;String&gt;, onFilterChange: KFunction8&lt;Set&lt;String&gt;, Set&lt;SeasonName&gt;, Set&lt;Int&gt;, Set&lt;String&gt;, Set&lt;StatusState&gt;, String, Boolean, SortOrder, Unit&gt; )</ID>
    <ID>FunctionNaming:HistoryScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun RecordItem( record: Record, onDelete: () -&gt; Unit )</ID>
    <ID>FunctionNaming:HistoryScreen.kt$@OptIn(ExperimentalMaterial3Api::class, ExperimentalMaterialApi::class) @Composable fun HistoryScreen( uiState: HistoryUiState, onNavigateBack: () -&gt; Unit, onRetry: () -&gt; Unit, onDeleteRecord: (String) -&gt; Unit, onRefresh: () -&gt; Unit, onLoadNextPage: () -&gt; Unit, onSearchQueryChange: (String) -&gt; Unit )</ID>
    <ID>FunctionNaming:ProgramCard.kt$@Composable fun InfoTag(text: String, color: Color)</ID>
    <ID>FunctionNaming:ProgramCard.kt$@Composable fun ProgramCard( programWithWork: ProgramWithWork, onRecordEpisode: (String, String, StatusState) -&gt; Unit, onShowUnwatchedEpisodes: (ProgramWithWork) -&gt; Unit, uiState: TrackUiState, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:Theme.kt$@Composable fun AniiiiictTheme( darkTheme: Boolean = isSystemInDarkTheme(), dynamicColor: Boolean = true, content: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:TrackScreen.kt$@OptIn(ExperimentalMaterial3Api::class, ExperimentalMaterialApi::class) @Composable fun TrackScreen( viewModel: TrackViewModel, uiState: TrackUiState, onRecordEpisode: (String, String, StatusState) -&gt; Unit, onNavigateToHistory: () -&gt; Unit = {}, onRefresh: () -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:UnwatchedEpisodesContent.kt$@Composable fun UnwatchedEpisodesContent( programs: List&lt;Program&gt;, isLoading: Boolean, onRecordEpisode: (String) -&gt; Unit, onMarkUpToAsWatched: (Int) -&gt; Unit, )</ID>
    <ID>InstanceOfCheckForException:AniListApolloClient.kt$AniListApolloClient$e is CancellationException</ID>
    <ID>InstanceOfCheckForException:AnnictApolloClient.kt$AnnictApolloClient$e is CancellationException</ID>
    <ID>InstanceOfCheckForException:AnnictRepositoryImpl.kt$AnnictRepositoryImpl$e is kotlinx.coroutines.CancellationException</ID>
    <ID>LongMethod:AnnictRepositoryImpl.kt$AnnictRepositoryImpl$override suspend fun getRawProgramsData(): Flow&lt;List&lt;ViewerProgramsQuery.Node?&gt;&gt;</ID>
    <ID>LongMethod:AnnictRepositoryImpl.kt$AnnictRepositoryImpl$override suspend fun getRecords(after: String?): PaginatedRecords</ID>
    <ID>LongMethod:DetailModal.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun DetailModal( programWithWork: ProgramWithWork, isLoading: Boolean, onDismiss: () -&gt; Unit, viewModel: DetailModalViewModel = hiltViewModel(), onRefresh: () -&gt; Unit = {}, )</ID>
    <ID>LongMethod:EpisodeCard.kt$@Composable fun EpisodeCard( program: Program, onRecordEpisode: (String) -&gt; Unit, onMarkUpToAsWatched: () -&gt; Unit, )</ID>
    <ID>LongMethod:FilterBar.kt$@OptIn(ExperimentalLayoutApi::class) @Composable fun FilterBar( filterState: FilterState, availableMedia: List&lt;String&gt;, availableSeasons: List&lt;SeasonName&gt;, availableYears: List&lt;Int&gt;, availableChannels: List&lt;String&gt;, onFilterChange: KFunction8&lt;Set&lt;String&gt;, Set&lt;SeasonName&gt;, Set&lt;Int&gt;, Set&lt;String&gt;, Set&lt;StatusState&gt;, String, Boolean, SortOrder, Unit&gt; )</ID>
    <ID>LongMethod:HistoryScreen.kt$@OptIn(ExperimentalMaterial3Api::class, ExperimentalMaterialApi::class) @Composable fun HistoryScreen( uiState: HistoryUiState, onNavigateBack: () -&gt; Unit, onRetry: () -&gt; Unit, onDeleteRecord: (String) -&gt; Unit, onRefresh: () -&gt; Unit, onLoadNextPage: () -&gt; Unit, onSearchQueryChange: (String) -&gt; Unit )</ID>
    <ID>LongMethod:MainActivity.kt$MainActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:ProgramCard.kt$@Composable fun ProgramCard( programWithWork: ProgramWithWork, onRecordEpisode: (String, String, StatusState) -&gt; Unit, onShowUnwatchedEpisodes: (ProgramWithWork) -&gt; Unit, uiState: TrackUiState, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:TrackScreen.kt$@OptIn(ExperimentalMaterial3Api::class, ExperimentalMaterialApi::class) @Composable fun TrackScreen( viewModel: TrackViewModel, uiState: TrackUiState, onRecordEpisode: (String, String, StatusState) -&gt; Unit, onNavigateToHistory: () -&gt; Unit = {}, onRefresh: () -&gt; Unit = {}, )</ID>
    <ID>LongMethod:TrackViewModel.kt$TrackViewModel$fun recordEpisode(episodeId: String, workId: String, currentStatus: StatusState)</ID>
    <ID>LongParameterList:FilterBar.kt$( filterState: FilterState, availableMedia: List&lt;String&gt;, availableSeasons: List&lt;SeasonName&gt;, availableYears: List&lt;Int&gt;, availableChannels: List&lt;String&gt;, onFilterChange: KFunction8&lt;Set&lt;String&gt;, Set&lt;SeasonName&gt;, Set&lt;Int&gt;, Set&lt;String&gt;, Set&lt;StatusState&gt;, String, Boolean, SortOrder, Unit&gt; )</ID>
    <ID>LongParameterList:HistoryScreen.kt$( uiState: HistoryUiState, onNavigateBack: () -&gt; Unit, onRetry: () -&gt; Unit, onDeleteRecord: (String) -&gt; Unit, onRefresh: () -&gt; Unit, onLoadNextPage: () -&gt; Unit, onSearchQueryChange: (String) -&gt; Unit )</ID>
    <ID>LongParameterList:LoadProgramsUseCaseTest.kt$LoadProgramsUseCaseTest.TestHelper$( id: String = "prog-id", startedAt: String = "2025-01-01T12:00:00Z", channelName: String = "テレビ東京", episodeId: String = "ep-id", episodeNumber: Int? = 1, episodeNumberText: String = "#1", episodeTitle: String = "エピソードタイトル", workId: String = "work-id", workTitle: String = "作品タイトル" )</ID>
    <ID>LongParameterList:ProgramFilterTest.kt$( seasonName: SeasonName? = null, seasonYear: Int? = null, media: String? = null, channelName: String? = null, status: StatusState? = null, title: String = "Test Title", startedAt: LocalDateTime? = null )</ID>
    <ID>LongParameterList:RetryManager.kt$RetryManager$( timeout: Long, timeUnit: TimeUnit = TimeUnit.SECONDS, maxAttempts: Int = 3, initialDelay: Long = 1000L, maxDelay: Long = 5000L, factor: Double = 2.0, block: suspend () -&gt; T )</ID>
    <ID>LongParameterList:TrackViewModel.kt$TrackViewModel$( selectedMedia: Set&lt;String&gt; = _uiState.value.filterState.selectedMedia, selectedSeason: Set&lt;SeasonName&gt; = _uiState.value.filterState.selectedSeason, selectedYear: Set&lt;Int&gt; = _uiState.value.filterState.selectedYear, selectedChannel: Set&lt;String&gt; = _uiState.value.filterState.selectedChannel, selectedStatus: Set&lt;StatusState&gt; = _uiState.value.filterState.selectedStatus, searchQuery: String = _uiState.value.filterState.searchQuery, showOnlyAired: Boolean = _uiState.value.filterState.showOnlyAired, sortOrder: SortOrder = _uiState.value.filterState.sortOrder )</ID>
    <ID>MagicNumber:AnnictAuthManager.kt$AnnictAuthManager$10</ID>
    <ID>MagicNumber:AnnictAuthManager.kt$AnnictAuthManager$5</ID>
    <ID>MagicNumber:AnnictAuthManager.kt$AnnictAuthManager$50</ID>
    <ID>MagicNumber:AnnictRepositoryImpl.kt$AnnictRepositoryImpl$5</ID>
    <ID>MagicNumber:AppModule.kt$AppModule$30</ID>
    <ID>MagicNumber:AuthScreen.kt$0.7f</ID>
    <ID>MagicNumber:BaseViewModel.kt$BaseViewModel$1000</ID>
    <ID>MagicNumber:CoilModule.kt$CoilModule$0.05</ID>
    <ID>MagicNumber:CoilModule.kt$CoilModule$0.25</ID>
    <ID>MagicNumber:Color.kt$0xFF625b71</ID>
    <ID>MagicNumber:Color.kt$0xFF6650a4</ID>
    <ID>MagicNumber:Color.kt$0xFF7D5260</ID>
    <ID>MagicNumber:Color.kt$0xFFCCC2DC</ID>
    <ID>MagicNumber:Color.kt$0xFFD0BCFF</ID>
    <ID>MagicNumber:Color.kt$0xFFEFB8C8</ID>
    <ID>MagicNumber:EpisodeCard.kt$1.2f</ID>
    <ID>MagicNumber:HistoryScreen.kt$3</ID>
    <ID>MagicNumber:MainActivity.kt$MainActivity$5</ID>
    <ID>MagicNumber:MainViewModel.kt$MainViewModel$200</ID>
    <ID>MagicNumber:MainViewModel.kt$MainViewModel$300</ID>
    <ID>MagicNumber:MainViewModel.kt$MainViewModel$5</ID>
    <ID>MagicNumber:ProgramFilter.kt$ProgramFilter$3</ID>
    <ID>MagicNumber:TokenManager.kt$TokenManager$10</ID>
    <ID>MagicNumber:TrackViewModel.kt$TrackViewModel$2000</ID>
    <ID>MaxLineLength:AnnictRepositoryImplTest.kt$AnnictRepositoryImplTest$coEvery { authManager.handleAuthorizationCode(code) } returns Result.failure(RuntimeException("Auth failed"))</ID>
    <ID>MaxLineLength:FilterBar.kt$onFilterChange: KFunction8&lt;Set&lt;String&gt;, Set&lt;SeasonName&gt;, Set&lt;Int&gt;, Set&lt;String&gt;, Set&lt;StatusState&gt;, String, Boolean, SortOrder, Unit&gt;</ID>
    <ID>MaxLineLength:HistoryViewModelTest.kt$HistoryViewModelTest$coEvery { loadRecordsUseCase.invoke(null) } returns RecordsResult(listOf(record1, record2), false, null)</ID>
    <ID>MaxLineLength:HistoryViewModelTest.kt$HistoryViewModelTest$val dummyRecords = listOf(mockk&lt;Record&gt; { every { work } returns mockk&lt;Work&gt; { every { title } returns "dummy" } })</ID>
    <ID>MaxLineLength:HistoryViewModelTest.kt$HistoryViewModelTest$val record = mockk&lt;Record&gt; { every { id } returns "id1"; every { work } returns mockk&lt;Work&gt; { every { title } returns "dummy" } }</ID>
    <ID>MaxLineLength:HistoryViewModelTest.kt$HistoryViewModelTest$val record1 = mockk&lt;Record&gt; { every { id } returns "id1"; every { work } returns mockk&lt;Work&gt; { every { title } returns "dummy1" } }</ID>
    <ID>MaxLineLength:HistoryViewModelTest.kt$HistoryViewModelTest$val record2 = mockk&lt;Record&gt; { every { id } returns "id2"; every { work } returns mockk&lt;Work&gt; { every { title } returns "dummy2" } }</ID>
    <ID>MaxLineLength:JudgeFinaleUseCase.kt$JudgeFinaleUseCase$if</ID>
    <ID>MaxLineLength:ProgramCard.kt$enabled = !uiState.isLoading &amp;&amp; !uiState.isRecording &amp;&amp; uiState.recordingSuccess != programWithWork.firstProgram.episode.id</ID>
    <ID>MaxLineLength:TrackScreen.kt$tint = if (uiState.isFilterVisible) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurface</ID>
    <ID>NestedBlockDepth:MainActivity.kt$MainActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>NewLineAtEndOfFile:AndroidLogger.kt$com.zelretch.aniiiiiict.util.AndroidLogger.kt</ID>
    <ID>NewLineAtEndOfFile:AniListApolloClient.kt$com.zelretch.aniiiiiict.data.api.AniListApolloClient.kt</ID>
    <ID>NewLineAtEndOfFile:AniListRepository.kt$com.zelretch.aniiiiiict.data.repository.AniListRepository.kt</ID>
    <ID>NewLineAtEndOfFile:AniListRepositoryImpl.kt$com.zelretch.aniiiiiict.data.repository.AniListRepositoryImpl.kt</ID>
    <ID>NewLineAtEndOfFile:AniListRepositoryImplTest.kt$com.zelretch.aniiiiiict.data.repository.AniListRepositoryImplTest.kt</ID>
    <ID>NewLineAtEndOfFile:AniiiiictApplication.kt$com.zelretch.aniiiiiict.AniiiiictApplication.kt</ID>
    <ID>NewLineAtEndOfFile:AnnictApolloClient.kt$com.zelretch.aniiiiiict.data.api.AnnictApolloClient.kt</ID>
    <ID>NewLineAtEndOfFile:AnnictConfig.kt$com.zelretch.aniiiiiict.data.api.AnnictConfig.kt</ID>
    <ID>NewLineAtEndOfFile:AnnictRepository.kt$com.zelretch.aniiiiiict.data.repository.AnnictRepository.kt</ID>
    <ID>NewLineAtEndOfFile:AnnictRepositoryImpl.kt$com.zelretch.aniiiiiict.data.repository.AnnictRepositoryImpl.kt</ID>
    <ID>NewLineAtEndOfFile:AnnictRepositoryImplTest.kt$com.zelretch.aniiiiiict.data.repository.AnnictRepositoryImplTest.kt</ID>
    <ID>NewLineAtEndOfFile:AuthScreen.kt$com.zelretch.aniiiiiict.ui.auth.AuthScreen.kt</ID>
    <ID>NewLineAtEndOfFile:BaseViewModel.kt$com.zelretch.aniiiiiict.ui.base.BaseViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:BulkRecordEpisodesUseCase.kt$com.zelretch.aniiiiiict.domain.usecase.BulkRecordEpisodesUseCase.kt</ID>
    <ID>NewLineAtEndOfFile:Channel.kt$com.zelretch.aniiiiiict.data.model.Channel.kt</ID>
    <ID>NewLineAtEndOfFile:CoilModule.kt$com.zelretch.aniiiiiict.di.CoilModule.kt</ID>
    <ID>NewLineAtEndOfFile:Color.kt$com.zelretch.aniiiiiict.ui.theme.Color.kt</ID>
    <ID>NewLineAtEndOfFile:ConfirmDialog.kt$com.zelretch.aniiiiiict.ui.details.components.ConfirmDialog.kt</ID>
    <ID>NewLineAtEndOfFile:CustomTabsIntentFactory.kt$com.zelretch.aniiiiiict.ui.base.CustomTabsIntentFactory.kt</ID>
    <ID>NewLineAtEndOfFile:DefaultCustomTabsIntentFactory.kt$com.zelretch.aniiiiiict.ui.base.DefaultCustomTabsIntentFactory.kt</ID>
    <ID>NewLineAtEndOfFile:DetailModal.kt$com.zelretch.aniiiiiict.ui.details.DetailModal.kt</ID>
    <ID>NewLineAtEndOfFile:DetailModalViewModel.kt$com.zelretch.aniiiiiict.ui.details.DetailModalViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:DetailModalViewModelE2ETest.kt$com.zelretch.aniiiiiict.ui.details.DetailModalViewModelE2ETest.kt</ID>
    <ID>NewLineAtEndOfFile:DetailModalViewModelTest.kt$com.zelretch.aniiiiiict.ui.details.DetailModalViewModelTest.kt</ID>
    <ID>NewLineAtEndOfFile:Episode.kt$com.zelretch.aniiiiiict.data.model.Episode.kt</ID>
    <ID>NewLineAtEndOfFile:EpisodeCard.kt$com.zelretch.aniiiiiict.ui.details.components.EpisodeCard.kt</ID>
    <ID>NewLineAtEndOfFile:EpisodesList.kt$com.zelretch.aniiiiiict.ui.details.components.EpisodesList.kt</ID>
    <ID>NewLineAtEndOfFile:FilterBar.kt$com.zelretch.aniiiiiict.ui.track.components.FilterBar.kt</ID>
    <ID>NewLineAtEndOfFile:FilterPreferences.kt$com.zelretch.aniiiiiict.data.datastore.FilterPreferences.kt</ID>
    <ID>NewLineAtEndOfFile:FilterProgramsUseCase.kt$com.zelretch.aniiiiiict.domain.usecase.FilterProgramsUseCase.kt</ID>
    <ID>NewLineAtEndOfFile:FilterState.kt$com.zelretch.aniiiiiict.domain.filter.FilterState.kt</ID>
    <ID>NewLineAtEndOfFile:HistoryScreen.kt$com.zelretch.aniiiiiict.ui.history.HistoryScreen.kt</ID>
    <ID>NewLineAtEndOfFile:JudgeFinaleUseCaseTest.kt$com.zelretch.aniiiiiict.domain.usecase.JudgeFinaleUseCaseTest.kt</ID>
    <ID>NewLineAtEndOfFile:LoadProgramsUseCase.kt$com.zelretch.aniiiiiict.domain.usecase.LoadProgramsUseCase.kt</ID>
    <ID>NewLineAtEndOfFile:LoadRecordsUseCase.kt$com.zelretch.aniiiiiict.domain.usecase.LoadRecordsUseCase.kt</ID>
    <ID>NewLineAtEndOfFile:Logger.kt$com.zelretch.aniiiiiict.util.Logger.kt</ID>
    <ID>NewLineAtEndOfFile:PaginatedRecords.kt$com.zelretch.aniiiiiict.data.model.PaginatedRecords.kt</ID>
    <ID>NewLineAtEndOfFile:Program.kt$com.zelretch.aniiiiiict.data.model.Program.kt</ID>
    <ID>NewLineAtEndOfFile:ProgramCard.kt$com.zelretch.aniiiiiict.ui.track.components.ProgramCard.kt</ID>
    <ID>NewLineAtEndOfFile:ProgramFilter.kt$com.zelretch.aniiiiiict.domain.filter.ProgramFilter.kt</ID>
    <ID>NewLineAtEndOfFile:ProgramFilterTest.kt$com.zelretch.aniiiiiict.domain.filter.ProgramFilterTest.kt</ID>
    <ID>NewLineAtEndOfFile:ProgramWithWork.kt$com.zelretch.aniiiiiict.data.model.ProgramWithWork.kt</ID>
    <ID>NewLineAtEndOfFile:Record.kt$com.zelretch.aniiiiiict.data.model.Record.kt</ID>
    <ID>NewLineAtEndOfFile:RetryManager.kt$com.zelretch.aniiiiiict.util.RetryManager.kt</ID>
    <ID>NewLineAtEndOfFile:SearchRecordsUseCase.kt$com.zelretch.aniiiiiict.domain.usecase.SearchRecordsUseCase.kt</ID>
    <ID>NewLineAtEndOfFile:TestLogger.kt$com.zelretch.aniiiiiict.util.TestLogger.kt</ID>
    <ID>NewLineAtEndOfFile:Theme.kt$com.zelretch.aniiiiiict.ui.theme.Theme.kt</ID>
    <ID>NewLineAtEndOfFile:TokenResponse.kt$com.zelretch.aniiiiiict.data.model.TokenResponse.kt</ID>
    <ID>NewLineAtEndOfFile:TrackScreen.kt$com.zelretch.aniiiiiict.ui.track.TrackScreen.kt</ID>
    <ID>NewLineAtEndOfFile:TrackViewModelE2ETest.kt$com.zelretch.aniiiiiict.ui.track.TrackViewModelE2ETest.kt</ID>
    <ID>NewLineAtEndOfFile:TrackViewModelTest.kt$com.zelretch.aniiiiiict.ui.track.TrackViewModelTest.kt</ID>
    <ID>NewLineAtEndOfFile:Type.kt$com.zelretch.aniiiiiict.ui.theme.Type.kt</ID>
    <ID>NewLineAtEndOfFile:UnwatchedEpisodesContent.kt$com.zelretch.aniiiiiict.ui.details.components.UnwatchedEpisodesContent.kt</ID>
    <ID>NewLineAtEndOfFile:UpdateViewStateUseCase.kt$com.zelretch.aniiiiiict.domain.usecase.UpdateViewStateUseCase.kt</ID>
    <ID>NewLineAtEndOfFile:WatchEpisodeUseCase.kt$com.zelretch.aniiiiiict.domain.usecase.WatchEpisodeUseCase.kt</ID>
    <ID>NewLineAtEndOfFile:Work.kt$com.zelretch.aniiiiiict.data.model.Work.kt</ID>
    <ID>ReturnCount:AniListRepositoryImpl.kt$AniListRepositoryImpl$override suspend fun getMedia(mediaId: Int): Result&lt;AniListMedia&gt;</ID>
    <ID>ReturnCount:AnnictRepositoryImpl.kt$AnnictRepositoryImpl$private suspend fun &lt;T&gt; executeApiRequest( operation: String, defaultValue: T, request: suspend () -&gt; T ): T</ID>
    <ID>ReturnCount:JudgeFinaleUseCase.kt$JudgeFinaleUseCase$suspend operator fun invoke(currentEpisodeNumber: Int, mediaId: Int): JudgeFinaleResult</ID>
    <ID>SwallowedException:AnnictAuthManager.kt$AnnictAuthManager$e: Exception</ID>
    <ID>ThrowsCount:AnnictAuthManager.kt$AnnictAuthManager$private fun getAccessToken(code: String): TokenResponse</ID>
    <ID>TooGenericExceptionCaught:AniListApolloClient.kt$AniListApolloClient$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AniListRepositoryImpl.kt$AniListRepositoryImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnnictApolloClient.kt$AnnictApolloClient$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnnictAuthManager.kt$AnnictAuthManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnnictRepositoryImpl.kt$AnnictRepositoryImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BaseViewModel.kt$BaseViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BulkRecordEpisodesUseCase.kt$BulkRecordEpisodesUseCase$e: Exception</ID>
    <ID>TooGenericExceptionCaught:DetailModalViewModel.kt$DetailModalViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MainViewModel.kt$MainViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:RetryManager.kt$RetryManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:TokenManager.kt$TokenManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:TrackViewModel.kt$TrackViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:UpdateViewStateUseCase.kt$UpdateViewStateUseCase$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WatchEpisodeUseCase.kt$WatchEpisodeUseCase$e: Exception</ID>
    <ID>TooGenericExceptionThrown:TrackViewModelTest.kt$TrackViewModelTest$throw RuntimeException("error")</ID>
    <ID>TooManyFunctions:AppModule.kt$AppModule</ID>
    <ID>TooManyFunctions:TrackViewModel.kt$TrackViewModel : BaseViewModel</ID>
    <ID>UnusedPrivateMember:MainViewModel.kt$MainViewModel$private fun handleError(error: Throwable)</ID>
    <ID>UnusedPrivateProperty:HistoryViewModel.kt$HistoryViewModel$private val TAG = "HistoryViewModel"</ID>
    <ID>UseCheckOrError:RetryManager.kt$RetryManager$throw lastException ?: IllegalStateException("リトライが失敗しました")</ID>
    <ID>VariableNaming:AniListRepositoryImpl.kt$AniListRepositoryImpl$private val TAG = "AniListRepositoryImpl"</ID>
    <ID>VariableNaming:AnnictRepositoryImpl.kt$AnnictRepositoryImpl$private val TAG = "AnnictRepositoryImpl"</ID>
    <ID>VariableNaming:BaseViewModel.kt$BaseViewModel$private val TAG = "BaseViewModel"</ID>
    <ID>VariableNaming:HistoryViewModel.kt$HistoryViewModel$private val TAG = "HistoryViewModel"</ID>
    <ID>VariableNaming:JudgeFinaleUseCase.kt$JudgeFinaleUseCase$private val TAG = "JudgeFinaleUseCase"</ID>
    <ID>VariableNaming:MainActivity.kt$MainActivity$private val TAG = "MainActivity"</ID>
    <ID>VariableNaming:MainViewModel.kt$MainViewModel$private val TAG = "MainViewModel"</ID>
    <ID>VariableNaming:TrackViewModel.kt$TrackViewModel$private val TAG = "TrackViewModel"</ID>
    <ID>VariableNaming:UpdateViewStateUseCase.kt$UpdateViewStateUseCase$private val TAG = "UpdateViewStateUseCase"</ID>
    <ID>WildcardImport:AnnictRepositoryImpl.kt$import com.annict.*</ID>
    <ID>WildcardImport:AnnictRepositoryImplTest.kt$import com.annict.*</ID>
    <ID>WildcardImport:AuthScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:AuthScreen.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:DetailModal.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:DetailModal.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:DetailModal.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:DetailModalViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>WildcardImport:DetailModalViewModelE2ETest.kt$import kotlinx.coroutines.test.*</ID>
    <ID>WildcardImport:EpisodeCard.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:EpisodeCard.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:FilterBar.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:FilterBar.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:FilterBar.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:FilterBar.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:HistoryScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:HistoryScreen.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:LoadProgramsUseCase.kt$import com.zelretch.aniiiiiict.data.model.*</ID>
    <ID>WildcardImport:MainViewModelTest.kt$import io.mockk.*</ID>
    <ID>WildcardImport:ProgramCard.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ProgramCard.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:ProgramFilterTest.kt$import com.zelretch.aniiiiiict.data.model.*</ID>
    <ID>WildcardImport:Theme.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:TrackScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:TrackScreen.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:TrackViewModelE2ETest.kt$import com.zelretch.aniiiiiict.domain.usecase.*</ID>
    <ID>WildcardImport:TrackViewModelE2ETest.kt$import kotlinx.coroutines.test.*</ID>
    <ID>WildcardImport:TrackViewModelTest.kt$import com.zelretch.aniiiiiict.domain.usecase.*</ID>
    <ID>WildcardImport:TrackViewModelTest.kt$import kotlinx.coroutines.test.*</ID>
  </CurrentIssues>
</SmellBaseline>
